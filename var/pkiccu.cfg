# Copyright 2019 Gradkell Systems, Inc.
# Author: Mike R. Prevost, mprevost@gradkell.com
#
# This file is part of PKICCU.
#
# PKICCU is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# PKICCU is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <https://www.gnu.org/licenses/>.

###
### PKICCU Example Configuration File
###
### This file is in YAML format.  YAML is a superset of JSON. Comments start
### with a "#" and continue to the end of the line.
###
### All possible options are shown with comments.
###
{
  ### Common config

  # Display process bars.  Set to "true" for always on and "false" for always
  # off, or "null" to autodetect (only on if term tty)
  noprogress: null,  

  ### Variable definitions that can be used later in the config file via
  ### {variable_name} syntax. A variable _ts_start is automatically set and is
  ### the date and time when PKICCU was started.
  variables: {
    data_dir: 'data',
    dod_prod_data_dir: '{data_dir}/pki/dod/prod',
    dod_jitc_data_dir: '{data_dir}/pki/dod/jitc',
    other_pki_data_dir: '{data_dir}/pki/other',
    bundles_dir: '{data_dir}/bundles',
    scripts_dir: 'scripts',
    log_dir: 'logs',
    java: 'java',
    crl_updater_jar_file: 'DBsignCrlUpdater.jar'
  },

  ### Logging settings.  
  ### See https://docs.python.org/3.6/library/logging.html 
  logging: {
    # Log levels are NOTSET, DEBUG, INFO, WARNING, ERROR, CRITICAL 
    level: "INFO", 
    # Log file name
    filename: "{log_dir}/PKICCU_{_ts_start}.log",
    # Log file mode: "w" to overwrite and "a" to append
    filemode: "w", 
    # Log file format, see
    # https://docs.python.org/3.6/library/logging.html#logrecord-attributes
    format: "%(asctime)s;%(levelname)s;%(message)s"
  },

  ### Configuration for HTTP/HTTPS connections
  http: {
    # Number of times to retry a request
    retries: 5, 
    # Time period in seconds pas which a request is abandoned as failed
    timeout: 5, 
    # Size of download chunks
    chunk_size: 1024,
    # Compare size of downloaded files to Content-Length response header 
    check_file_size: true, 
    # If/how to do ssl cert validation. Can be true, false or the name of a 
    # file containing root certificates.
    ssl_cert_verify: "./roots.bundle", 
    # Append the standard "certifi" from https://certifi.io that ship with
    # python to the trusted cert list for ssl cert validation
    append_system_roots: true 
  },

  ### Configuration for the downloader
  disa_downloader: {
    prod: {
      # Download certs from DISA (certs are skipped if they are already there)
      download_certs: true, 
      # Download CRLs from DISA (CRLs are always downloaded)
      download_crls: true, 
      # Base DISA website URL
      disa_url: 'https://crl.gds.disa.mil', 
      # Base dir to put downloaded certs in.  
      # There will be subdirs based on type of cert with sub first for certs and
      # crls.
      data_dir: '{dod_prod_data_dir}', 
      # Download DISA's big CRL zip file.  More effiencient.  
      # Otherwise the complressed CRLs are downloaded individually and
      # uncrompressed.
      use_all_crl_zip: true, 
      # Keep timestamped copies of the big CRL zips
      archive_crl_zips: true,
      # Where to put the archived CRL zips 
      crl_zip_archive_dir: '{dod_prod_data_dir}/crl_zips', 
      # Compared hash of downloaded cert file to the one on DISA site
      check_cert_hashes: true, 
      # Parse downloaded cert file to make sure it's a valid cert
      check_cert_parse: true, 
      # Parse downloaded CRL file to make sure it's a valid CRL
      check_crl_parse: true 
    },
    # Options mean the same as above
    jitc: { 
      download_certs: true,
      download_crls: true,
      disa_url: 'https://crl.nit.disa.mil',
      data_dir: '{dod_jitc_data_dir}',
      use_all_crl_zip: true,
      archive_crl_zips: true,
      crl_zip_archive_dir: '{dod_jitc_data_dir}/crl_zips',
      check_cert_hashes: true,
      check_cert_parse: true,
      check_crl_parse: true
    },
  },

  ### Configuration for the URL downloader which downloads individual files
  url_downloader: {
    # Download the following files
    url_download: true, 
    # Array of download file specifications
    downloads: [ 
      {
        # Type of file: "cer", "crl", or something else like "bin". Cert files
        # ("cer") are skipped if they are already there.
        type: "cer",
        # File format: "der", "pem" or "bin" PEM cert files are converted to
        # DER.  Other files are left alone. 
        fmt: "der",
        # Source URL to download
        src: "http://other.host.com/cert/Other_CA.cer", 
        # Destination file
        dst: "{other_pki_data_dir}/prod/intermediate/certs/Other_CA.cer" 
      },
      # Options mean the same as above
      { 
        type: "crl",
        fmt: "der",
        src: "http://other.host.com/cert/Other_CA.crl", 
        dst: "{other_pki_data_dir}/prod/intermediate/crls/Other_CA.crl" 
      }
    ]
  },

  ### Configuration for the cert bundler which makes openssl/apache style cert
  ### bundles.
  cert_bundler: {
    # Make the following bundles
    make_bundles: true, 
    # Array of bundle definitions
    bundles: {
      roots: {
        # Output cert bundle filename
        filename: '{bundles_dir}/roots.bundle', 
        # Filename pattern for certs
        match: '*.cer', 
        # Recursively search in subdirectories under source dir
        recursive: false, 
        # Array if source dirs and/or files
        sources: [ 
          '{dod_prod_data_dir}/root/certs',
          '{dod_jitc_data_dir}/root/certs',
          '{other_pki_data_dir}/prod/root/certs',
          '{other_pki_data_dir}/test/root/certs'
        ]
      },
      # Options mean the same as above
      SSLCACertificateFile: { 
        filename: '{bundles_dir}/SSLCACertificateFile',
        match: '*.cer',
        recursive: false,
        sources: [
          '{dod_prod_data_dir}/id/certs',
          '{dod_prod_data_dir}/root/certs',
          '{dod_jitc_data_dir}/id/certs',
          '{dod_jitc_data_dir}/root/certs',
          '{other_pki_data_dir}/prod/intermediate/certs',
          '{other_pki_data_dir}/prod/root/certs',
          '{other_pki_data_dir}/test/intermediate/certs',
          '{other_pki_data_dir}/test/root/certs'
        ]
      },
      # Options mean the same as above
      SSLCADNRequestFile: {
        filename: '{bundles_dir}/SSLCADNRequestFile',
        match: '*.cer',
        recursive: false,
        sources: [
          '{dod_prod_data_dir}/id/certs',
          '{dod_jitc_data_dir}/id/certs',
          '{other_pki_data_dir}/prod/intermediate/certs',
          '{other_pki_data_dir}/test/intermediate/certs'
        ]
      }
    }
  },

  ### Scripts to run after everything else completes
  script_runner: {
    # Run the following scripts
    run_scripts: true, 
    # Array of script definitions
    run_list: [ 
      {
        # Descriptive name of script
        name: "Copy Bundles", 
        # Array of command line arguments starting with the script itself. Each
        # argument as a separate string
        cmd_line: ["{scripts_dir}/copy_bundles.sh", "SSLCACertificateFile", "SSLCADNRequestFile", "/etc/httpd/conf"],
        # Directory script is run in
        current_working_dir: "{bundles_dir}", 
        # Honor current_working_dir.  If false, the script is executed in dir of
        # the main program 
        use_script_cwd: false, 
        # Environment variables to add to (and overwrite) those in the scripts
        # execution environment.
        env: { data_dir: "{data_dir}", "foo": "bar" }, 
        # Max length of time in seconds script execution should take.  Aborted
        # after this time. Set to null for indefinite time.
        timeout: null, 
        # Run via the shell (less secure), otherwise (false) it is executed
        # directly (more secure).
        use_shell: false 
      },
      # Options mean the same as above
      { 
        # Note: The DBsign CRL Updater operates on one directory at a time. The
        # run_dbsign_crl_updater program can run the DBsign CRL Updater twice:
        # once for a dir of certs, and again for a dir of CRLs.  You might need
        # to run run_dbsign_crl_updater multiple times to import all the
        # certs/CRLs you need. Or, you can  set it to run once at a higher
        # directory so that it can get all the certs and/or CRLs underneath.
        # See "run_dbsign_crl_updater --help" for detailed argument
        # descriptions.
        # NOTE: this example assumes that DBsignCrlUpdater.jar, bcfips_*.jar, 
        # bcpkix-fips-*.jar, and the config file, DBsign.cfg, and perhaps any 
        # JDBC drivers are all in the scripts dir.  The scripts dir will be the
        # current working directory when the script is executed.
        name: "DBsign CRL Updater",
        cmd_line: [ "{scripts_dir}/run_dbsign_crl_updater",
                    "--java={java}", 
                    "--jar={crl_updater_jar_file}",
                    "--config=DBsign.cfg",
                    "--cert_dir=../{data_dir}/pki",
                    "--cert_ext=cer",
                    "--cert_dir_recurse",
                    "--crl_dir=../{data_dir}/pki",
                    "--crl_ext=crl",
                    "--crl_dir_recurse",
                    "--parse" ],
        current_working_dir: "{scripts_dir}",
        use_script_cwd: true, 
        success_return_code: 0,
        use_shell: false
      }
    ]
  }
}
